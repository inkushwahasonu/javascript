// Real life example

/*
For instance, GitHub allows us to retrieve commits in the same, paginated fashion:

We should make a request to fetch in the form https://api.github.com/repos/<repo>/commits.
It responds with a JSON of 30 commits, and also provides a link to the next page in the Link header.
Then we can use that link for the next request, to get more commits, and so on.
For our code, we’d like to have a simpler way to get commits.
*/


// Here’s such function, implemented as async generator:
/*
async function* fetchCommits(repo) {
  let url = `https://api.github.com/repos/${repo}/commits`;

  while (url) {
    const response = await fetch(url, { // (1)
      headers: {'User-Agent': 'Our script'}, // github needs any user-agent header
    });

    const body = await response.json(); // (2) response is JSON (array of commits)

    // (3) the URL of the next page is in the headers, extract it
    let nextPage = response.headers.get('Link').match(/<(.*?)>; rel="next"/);
    nextPage = nextPage?.[1];

    url = nextPage;

    for(let commit of body) { // (4) yield commits one by one, until the page ends
      yield commit;
    }
  }
}
*/


/*
We use the browser fetch method to download the commits.

The initial URL is https://api.github.com/repos/<repo>/commits, and the next page will be in the Link header of the response.
The fetch method allows us to supply authorization and other headers if needed – here GitHub requires User-Agent.
The commits are returned in JSON format.

We should get the next page URL from the Link header of the response. It has a special format, so we use a regular expression for that.

The next page URL may look like https://api.github.com/repositories/93253246/commits?page=2. It’s generated by GitHub itself.
Then we yield the received commits one by one, and when they finish, the next while(url) iteration will trigger, making one more request.

An example of use (shows commit authors in console):
*/



(async () => {

  let count = 0;

  for await (const commit of fetchCommits('javascript-tutorial/en.javascript.info')) {

    console.log(commit.author.login);

    if (++count == 100) { // let's stop at 100 commits
      break;
    }
  }

})();